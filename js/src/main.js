// Generated by CoffeeScript 1.9.0
(function() {
  var AbstractView, FamilyCollection, FamilyModel, FamilyTreeView, FamilyView, PeopleCollection, PeopleModel, PeopleView, SiteController, SiteView,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __hasProp = {}.hasOwnProperty,
    __slice = [].slice;

  AbstractView = (function(_super) {
    __extends(AbstractView, _super);

    AbstractView.prototype.families = null;

    AbstractView.prototype.people = null;

    AbstractView.prototype.collection = null;

    AbstractView.prototype.modal = null;

    function AbstractView() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      this._setNumberOfRow = __bind(this._setNumberOfRow, this);
      this._reload = __bind(this._reload, this);
      this._create = __bind(this._create, this);
      this._update = __bind(this._update, this);
      this._remove = __bind(this._remove, this);
      this.search = __bind(this.search, this);
      this.render = __bind(this.render, this);
      AbstractView.__super__.constructor.apply(this, args);
    }

    AbstractView.prototype.render = function() {
      return this.$el;
    };

    AbstractView.prototype.search = function(search) {
      var $search_text, $td, attr, collection, flag, models, _i, _len, _ref;
      flag = false;
      _ref = this.searchAttr;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        attr = _ref[_i];
        if (_.isObject(attr)) {
          if (_.keys(attr).length === 1) {
            $td = this.$el.find('td').eq(_.values(attr)[0]);
            $search_text = $td.find('.search-text');
            $td.find('.text-warning').each(function() {
              return $(this).replaceWith($(this).text());
            });
            if (this.model.get(_.keys(attr)[0]).toLowerCase().indexOf(search.toLowerCase()) !== -1) {
              $search_text.html($search_text.html().replace(new RegExp("(" + search + ")", 'i'), "<span class='text-warning bg-primary'>$1</span>"));
              flag = true;
            }
          } else if (_.has(attr, 'eq') && _.has(attr, 'key')) {
            $td = this.$el.find('td').eq(attr.eq);
            $search_text = $td.find('.search-text');
            collection = this[_.first(_.keys(_.omit(attr, ['eq', 'key'])))];
            models = _.map(this.model.get(_.keys(attr.key)[0]), (function(_this) {
              return function(find) {
                return collection.findWhere(_.object([_.values(attr.key)[0]], [find]));
              };
            })(this));
            $td.find('.text-warning').each(function() {
              return $(this).replaceWith($(this).text());
            });
            _.each(models, (function(_this) {
              return function(model) {
                if ((model != null) && model.get(_.first(_.values(_.omit(attr, ['eq', 'key'])))).toLowerCase().indexOf(search.toLowerCase()) !== -1) {
                  $search_text.html($search_text.html().replace(new RegExp("(" + search + ")", 'i'), "<span class='text-warning bg-primary'>$1</span>"));
                  return flag = true;
                }
              };
            })(this));
          }
        }
      }
      return this.$el[flag || !search ? 'show' : 'hide']();
    };

    AbstractView.prototype._remove = function() {
      return bootbox.confirm("Вы уверены?", (function(_this) {
        return function(result) {
          if (result) {
            return _this.model.destroy();
          }
        };
      })(this));
    };

    AbstractView.prototype._update = function() {
      return this.trigger('edit', this.model);
    };

    AbstractView.prototype._create = function() {
      return $();
    };

    AbstractView.prototype._reload = function() {
      var el;
      el = this._create();
      return $.when(this.$el.replaceWith(el)).then((function(_this) {
        return function() {
          _this.setElement(el);
          return _this.$el.trigger('setNumberOfRow');
        };
      })(this));
    };

    AbstractView.prototype._setNumberOfRow = function() {
      return this.$el.find('td').eq(0).text(this.$el.parents('table').find('tr').index(this.el));
    };

    return AbstractView;

  })(Backbone.View);

  FamilyCollection = (function(_super) {
    __extends(FamilyCollection, _super);

    FamilyCollection.prototype.localStorage = new Backbone.LocalStorage("Family");

    FamilyCollection.prototype.model = null;

    function FamilyCollection() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      this.initialize = __bind(this.initialize, this);
      this.model = FamilyModel;
      FamilyCollection.__super__.constructor.apply(this, args);
    }

    FamilyCollection.prototype.initialize = function() {};

    return FamilyCollection;

  })(Backbone.Collection);

  FamilyModel = (function(_super) {
    var _form, _instance;

    __extends(FamilyModel, _super);

    function FamilyModel() {
      this.validate = __bind(this.validate, this);
      this.initialize = __bind(this.initialize, this);
      return FamilyModel.__super__.constructor.apply(this, arguments);
    }

    _instance = null;

    _form = null;

    FamilyModel.prototype.defaults = {
      name: "",
      id: 0
    };

    FamilyModel.prototype.collection = null;

    FamilyModel.prototype.people = null;

    FamilyModel.prototype.localStorage = new Backbone.LocalStorage("Family");

    FamilyModel.prototype.initialize = function() {
      return _form = $('#add_family-form');
    };

    FamilyModel.prototype.validate = function(attrs, options) {
      if (_.isEmpty(attrs.name)) {
        return [_form.find('input[name="name"]'), "Заполните поле имя"];
      }
    };

    return FamilyModel;

  })(Backbone.Model);

  FamilyTreeView = (function(_super) {
    var _lines, _linesSvg, _model, _svgCache, _svgTree, _tree;

    __extends(FamilyTreeView, _super);

    _model = null;

    _tree = null;

    _svgTree = [];

    _svgCache = [];

    _lines = [[]];

    _linesSvg = [];

    FamilyTreeView.prototype.people = null;

    FamilyTreeView.prototype.families = null;

    FamilyTreeView.prototype.parent = null;

    FamilyTreeView.prototype.svg = null;

    FamilyTreeView.prototype.params = {
      width: 870,
      height: 300,
      padding: {
        top: 8,
        right: 8,
        bottom: 8,
        left: 8
      },
      margin: {
        left: 8,
        right: 10,
        top: 20,
        bottom: 8
      },
      family: {
        margin: {
          left: 20,
          right: 20
        }
      }
    };

    function FamilyTreeView() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      this._showPersonElement = __bind(this._showPersonElement, this);
      this._showFamilyElement = __bind(this._showFamilyElement, this);
      this._lineTreePerson = __bind(this._lineTreePerson, this);
      this._lineTree = __bind(this._lineTree, this);
      this._center = __bind(this._center, this);
      this._endLine = __bind(this._endLine, this);
      this._line = __bind(this._line, this);
      this._rect = __bind(this._rect, this);
      this._text = __bind(this._text, this);
      this._person = __bind(this._person, this);
      this._family = __bind(this._family, this);
      this._draw = __bind(this._draw, this);
      this._clearSvg = __bind(this._clearSvg, this);
      this._createSvg = __bind(this._createSvg, this);
      this._close = __bind(this._close, this);
      this._open = __bind(this._open, this);
      this.open = __bind(this.open, this);
      this.events = __bind(this.events, this);
      this.initialize = __bind(this.initialize, this);
      _.extend(this, args[0]);
      FamilyTreeView.__super__.constructor.apply(this, args);
    }

    FamilyTreeView.prototype.initialize = function() {
      return this.setElement($('#geneologic_tree-modal'));
    };

    FamilyTreeView.prototype.events = function() {
      return {
        'show.bs.modal': '_open',
        'hide.bs.modal': '_close'
      };
    };

    FamilyTreeView.prototype.open = function(model) {
      _model = model;
      return this.$el.modal('show');
    };

    FamilyTreeView.prototype._open = function() {
      return this._createSvg();
    };

    FamilyTreeView.prototype._close = function() {
      this._clearSvg();
      _model = null;
      return _tree = null;
    };

    FamilyTreeView.prototype._createSvg = function() {
      if (this.svg === null) {
        this.svg = d3.select(this.$el.find('.modal-body').get(0)).append("svg");
        this.svg.attr("width", this.params.width).attr("height", this.params.height).attr("class", "tree");
        this.svg.append("g").attr("class", "lines");
      }
      _tree = this.people.tree(_model);
      return this._draw(_tree, null);
    };

    FamilyTreeView.prototype._clearSvg = function() {
      this.svg = null;
      return this.$el.find('.modal-body').html('');
    };

    FamilyTreeView.prototype._draw = function(tree, parent) {
      var tree_nodes, _family, _person;
      _family = this._family;
      _person = this._person;
      tree_nodes = this.svg.selectAll("svg.c" + (new String(Math.random() * (Math.pow(10, 16))).slice(0, 10))).data(tree);
      return tree_nodes.enter().append("svg").attr('id', function(family) {
        if (!(family instanceof PeopleModel)) {
          return "family_" + (family.husband.get('id')) + "-" + (family.wife.get('id'));
        } else {
          return "person_" + (family.get('id'));
        }
      }).attr('class', function(family) {
        if (!(family instanceof PeopleModel)) {
          return 'family';
        } else {
          return 'person';
        }
      }).attr('visibility', 'hidden').each(function(family, index) {
        if (!(family instanceof PeopleModel)) {
          return _family(this, family, index, tree, parent);
        } else {
          return _person(this, family, index, tree, parent);
        }
      });
    };

    FamilyTreeView.prototype._family = function(element, family, index, root, parents) {
      var family_svg_group, wait, wait_for_append;
      element = d3.select(element);
      family_svg_group = _.map([family.husband, family.wife], (function(_this) {
        return function(human, index) {
          var svg;
          svg = element.append("svg").attr("id", !index ? "husband-" + (element.attr('id')) : "wife-" + (element.attr('id'))).attr("class", !index ? "husband" : "wife");
          _this._text(human.get("name"), svg);
          return svg;
        };
      })(this));
      _.last(_lines).push(family);
      wait_for_append = (function(_this) {
        return function(wait) {
          var bbox, error, node;
          node = family_svg_group[0].node();
          try {
            bbox = node.getBBox();
          } catch (_error) {
            error = _error;
            bbox = {
              x: node.clientLeft,
              y: node.clientTop,
              width: node.clientWidth,
              height: node.clientHeight
            };
          }
          if (bbox.width > 0 && bbox.height > 0) {
            _this._showFamilyElement(element, family, index, root, parents, bbox);
            return clearInterval(wait);
          }
        };
      })(this);
      return wait = setInterval((function() {
        return wait_for_append(wait);
      }), 10);
    };

    FamilyTreeView.prototype._person = function(element, person, index, root, parents) {
      var wait, wait_for_append;
      element = d3.select(element);
      this._text(person.get("name"), element);
      _.last(_lines).push(person);
      wait_for_append = (function(_this) {
        return function(wait) {
          var bbox, error, node;
          node = element.node();
          try {
            bbox = node.getBBox();
          } catch (_error) {
            error = _error;
            bbox = {
              x: node.clientLeft,
              y: node.clientTop,
              width: node.clientWidth,
              height: node.clientHeight
            };
          }
          if (bbox.width > 0 && bbox.height > 0) {
            _this._showPersonElement(element, person, index, root, parents, bbox);
            return clearInterval(wait);
          }
        };
      })(this);
      return wait = setInterval((function() {
        return wait_for_append(wait);
      }), 10);
    };

    FamilyTreeView.prototype._text = function(text, parent) {
      return text = parent.append('text').text(text);
    };

    FamilyTreeView.prototype._rect = function(parent) {
      var bbox, text, text_bbox;
      bbox = parent.node().getBBox();
      text = parent.select('text');
      text_bbox = text.node().getBBox();
      parent.insert("rect", ":first-child").attr("width", bbox.width + this.params.padding.left + this.params.padding.right).attr("height", bbox.height + this.params.padding.top + this.params.padding.bottom).attr("ry", "5").attr("rx", "5");
      return text.attr('y', text_bbox.height + this.params.padding.top - text_bbox.y).attr('x', text_bbox.x + this.params.padding.left);
    };

    FamilyTreeView.prototype._line = function(a, b) {
      var end, end_y, height1, height2, start, start_y, width1, width2, x1, x2, y1, y2;
      x1 = (parseInt($(a.node()).attr('x')) || 0) + (parseInt($(a.node()).parents('svg').attr('x')) || 0);
      x2 = (parseInt($(b.node()).attr('x')) || 0) + (parseInt($(b.node()).parents('svg').attr('x')) || 0);
      y1 = (parseInt($(a.node()).attr('y')) || 0) + (parseInt($(a.node()).parents('svg').attr('y')) || 0);
      y2 = (parseInt($(b.node()).attr('y')) || 0) + (parseInt($(b.node()).parents('svg').attr('y')) || 0);
      width1 = a.node().getBBox().width;
      width2 = b.node().getBBox().width;
      height1 = a.node().getBBox().height;
      height2 = b.node().getBBox().height;
      start = x1 + (Math.floor(width1 / 2));
      end = x2 + (Math.floor(width2 / 2));
      start_y = y1 + (Math.floor(height1 / 2));
      end_y = y2 + (Math.floor(height2 / 2));
      return this.svg.select(".lines").append("path").attr("d", "M " + start + " " + start_y + " L " + end + " " + end_y);
    };

    FamilyTreeView.prototype._endLine = function(parent) {
      var children;
      children = [];
      _lines.push([]);
      _.each(parent, (function(_this) {
        return function(family) {
          return _.each(family.children, function(child) {
            if (children.indexOf(child) === -1) {
              return children.push(child);
            }
          });
        };
      })(this));
      if (children.length) {
        return this._draw(children, parent);
      }
    };

    FamilyTreeView.prototype._center = function(last_element) {
      var $last_element, line, offset, width, x;
      $last_element = $(last_element.node());
      x = parseInt($last_element.attr('x')) || 0;
      width = last_element.node().getBBox().width;
      line = $last_element.prevAll().andSelf().filter(function() {
        return $(this).attr('y') === $last_element.attr('y');
      });
      offset = (Math.floor(this.params.width / 2)) - (Math.floor((x + width) / 2));
      line.each(function() {
        return $(this).attr('x', offset + parseInt($(this).attr('x')));
      });
      line.each((function(_this) {
        return function(index, element) {
          if ($(element).attr('class') === 'family') {
            return _this._line(d3.select($(element).find('.husband').get(0)), d3.select($(element).find('.wife').get(0)));
          }
        };
      })(this));
      return _linesSvg.push(line);
    };

    FamilyTreeView.prototype._lineTree = function(element, family) {
      var center1, center2, center3, center4, husband, parent1, parent2, wife, x, x1, x2, x_wife, y, y1, y2;
      husband = element.select('.husband');
      wife = element.select('.wife');
      parent1 = this.svg.select("#family_" + (family.husband.get("parent").join("-")));
      parent2 = this.svg.select("#family_" + (family.wife.get("parent").join("-")));
      x = parseInt(element.attr('x')) || 0;
      x_wife = x + parseInt(wife.attr('x'));
      y = parseInt(element.attr('y')) || 0;
      center3 = [Math.floor(husband.node().getBBox().width / 2), Math.floor(husband.node().getBBox().height / 2)];
      center4 = [Math.floor(wife.node().getBBox().width / 2), Math.floor(wife.node().getBBox().height / 2)];
      if (parent1.size()) {
        x1 = parseInt(parent1.attr('x')) || 0;
        y1 = parseInt(parent1.attr('y')) || 0;
        center1 = [parseInt($(parent1.select('.wife').node()).attr('x')) - (Math.floor(this.params.family.margin.left / 2)), Math.floor(parent1.node().getBBox().height / 2)];
        this.svg.select(".lines").append("path").attr("d", "M " + (x1 + center1[0]) + " " + (y1 + center1[1]) + "\nl 0 25\nq0,3 " + (x + center3[0] > x1 + center1[0] ? "3" : "-3") + ",3\nL " + (x + center3[0] + (x + center3[0] > x1 + center1[0] ? -3 : 3)) + " " + (y1 + center1[1] + 28) + "\nq" + (x + center3[0] > x1 + center1[0] ? "3" : "-3") + ",0 " + (x + center3[0] > x1 + center1[0] ? "3" : "-3") + ",3\nL " + (x + center3[0]) + " " + (y + center3[1]));
      }
      if (parent2.size()) {
        x2 = parseInt(parent2.attr('x')) || 0;
        y2 = parseInt(parent2.attr('y')) || 0;
        center2 = [parseInt($(parent2.select('.wife').node()).attr('x')) - (Math.floor(this.params.family.margin.left / 2)), Math.floor(parent2.node().getBBox().height / 2)];
        return this.svg.select(".lines").append("path").attr("d", "M " + (x2 + center2[0]) + " " + (y2 + center2[1]) + "\nl 0 25\nq0,3 " + (x_wife + center4[0] > x2 + center2[0] ? "3" : "-3") + ",3\nL " + (x_wife + center4[0] + 3) + " " + (y1 + center1[1] + 28) + "\nq" + (x_wife + center4[0] > x2 + center2[0] ? "3" : "-3") + ",0 " + (x_wife + center4[0] > x2 + center2[0] ? "3" : "-3") + ",3\nL " + (x_wife + center4[0]) + " " + (y + center4[1]));
      }
    };

    FamilyTreeView.prototype._lineTreePerson = function(element, person) {
      var center, center1, parent, x, x1, y, y1;
      parent = this.svg.select("#family_" + (person.get("parent").join("-")));
      x = parseInt(element.attr('x')) || 0;
      y = parseInt(element.attr('y')) || 0;
      x1 = parseInt(parent.attr('x')) || 0;
      y1 = parseInt(parent.attr('y')) || 0;
      center = [Math.floor(element.node().getBBox().width / 2), Math.floor(element.node().getBBox().height / 2)];
      center1 = [parseInt($(parent.select('.wife').node()).attr('x')) - (Math.floor(this.params.family.margin.left / 2)), Math.floor(parent.node().getBBox().height / 2)];
      return this.svg.select(".lines").append("path").attr("d", "M " + (x1 + center1[0]) + " " + (y1 + center1[1]) + "\nl 0 25\nL " + (x + center[0]) + " " + (y + center[1]));
    };

    FamilyTreeView.prototype._showFamilyElement = function(element, family, index, root, parents, bbox) {
      var $first_parent, husband, parents_line, prev, wife, y;
      y = 0;
      husband = element.select('.husband');
      wife = element.select('.wife');
      if (parents != null) {
        parents_line = _.last(_linesSvg);
        $first_parent = $(_.first(parents_line));
        y = (parseInt($first_parent.attr('y')) || 0) + $first_parent.get(0).getBBox().height + this.params.margin.top;
      }
      _.each([husband, wife], (function(_this) {
        return function(d3) {
          d3.select("text").attr('x', 0).attr('y', d3.select('text').node().getBBox().height);
          return _this._rect(d3);
        };
      })(this));
      wife.attr("x", husband.node().getBBox().width + this.params.family.margin.left);
      prev = $(element.node()).prev('svg').filter(function() {
        return !_.contains(_.last(_linesSvg), this);
      });
      if (prev.length) {
        bbox = prev.get(0).getBBox();
        element.attr("x", (parseInt(prev.attr('x'))) + bbox.width + this.params.margin.left + this.params.margin.right);
      } else {
        element.attr("x", this.params.margin.left);
      }
      element.attr("y", y);
      if (root.length === (index + 1)) {
        this._center(element);
        this._endLine(_.last(_lines));
      }
      if (root.length === (index + 1) && (parents != null)) {
        this._lineTree(element, family);
      }
      return $(element.node()).removeAttr('visibility');
    };

    FamilyTreeView.prototype._showPersonElement = function(element, person, index, root, parents, bbox) {
      var $first_parent, parents_line, prev, y;
      y = 0;
      if (parents != null) {
        parents_line = _.last(_linesSvg);
        $first_parent = $(_.first(parents_line));
        y = (parseInt($first_parent.attr('y')) || 0) + $first_parent.get(0).getBBox().height + this.params.margin.top;
      }
      element.select("text").attr('x', 0).attr('y', element.select('text').node().getBBox().height);
      this._rect(element);
      prev = $(element.node()).prev('svg').filter(function() {
        return !_.contains(_.last(_linesSvg), this);
      });
      if (prev.length) {
        bbox = prev.get(0).getBBox();
        element.attr("x", bbox.x + bbox.width + this.params.margin.left + this.params.margin.right);
      } else {
        element.attr("x", this.params.margin.left);
      }
      element.attr("y", y);
      if (root.length === (index + 1)) {
        this._center(element);
      }
      if (root.length === (index + 1) && (parents != null)) {
        this._lineTreePerson(element, person);
      }
      return $(element.node()).removeAttr('visibility');
    };

    return FamilyTreeView;

  })(Backbone.View);

  FamilyView = (function(_super) {
    var _template;

    __extends(FamilyView, _super);

    _template = null;

    FamilyView.prototype.modal = null;

    FamilyView.prototype.searchAttr = [
      {
        "name": 1
      }
    ];

    function FamilyView() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      this._createTree = __bind(this._createTree, this);
      this._create = __bind(this._create, this);
      this.events = __bind(this.events, this);
      this.initialize = __bind(this.initialize, this);
      _template = _.template($('#family-teplete').html());
      this.modal = $('#add_family-modal');
      _.extend(this, args[0]);
      this.collection = this.families;
      FamilyView.__super__.constructor.apply(this, args);
    }

    FamilyView.prototype.initialize = function() {
      return this.setElement(this._create());
    };

    FamilyView.prototype.events = function() {
      this.model.on('destroy', (function(_this) {
        return function() {
          return _this.$el.remove();
        };
      })(this));
      this.model.on('change', this._reload);
      return {
        'click .fa-remove': '_remove',
        'click .fa-pencil': '_update',
        'click .fa-group': '_createTree',
        'setNumberOfRow': '_setNumberOfRow'
      };
    };

    FamilyView.prototype._create = function() {
      return $(_template({
        num: 0,
        name: this.model.get('name')
      }));
    };

    FamilyView.prototype._createTree = function() {
      return this.trigger('tree', this.model);
    };

    return FamilyView;

  })(AbstractView);

  PeopleCollection = (function(_super) {
    var _tree, _treeCache;

    __extends(PeopleCollection, _super);

    _tree = [];

    _treeCache = {};

    PeopleCollection.prototype.localStorage = new Backbone.LocalStorage("People");

    PeopleCollection.prototype.model = null;

    function PeopleCollection() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      this._sort = __bind(this._sort, this);
      this._findRelationFamily = __bind(this._findRelationFamily, this);
      this._findChildren = __bind(this._findChildren, this);
      this._createFamily = __bind(this._createFamily, this);
      this.tree = __bind(this.tree, this);
      this.model = PeopleModel;
      PeopleCollection.__super__.constructor.apply(this, args);
    }

    PeopleCollection.prototype.tree = function(family) {
      var family_id, members, roots;
      _tree = [];
      _treeCache = {};
      family_id = family.get('id');
      members = new PeopleCollection(this.models.filter((function(_this) {
        return function(model) {
          return model.get('family').indexOf(family_id) !== -1;
        };
      })(this)));
      roots = new PeopleCollection(members.filter((function(_this) {
        return function(model) {
          return _.isEmpty(model.get('parent'));
        };
      })(this)));
      roots.each((function(_this) {
        return function(model) {
          family = _this._createFamily(members, model);
          if (!_.contains(_tree, family)) {
            if (!(family instanceof PeopleModel)) {
              if (_.isEmpty(family.husband.get('parent')) && _.isEmpty(family.wife.get('parent'))) {
                return _tree.push(family);
              }
            } else {
              return _tree.push(family);
            }
          }
        };
      })(this));
      _.each(_tree, (function(_this) {
        return function(model) {
          var relation;
          if (!(model instanceof PeopleModel)) {
            relation = _this._findRelationFamily(_this, model);
            if (relation != null) {
              return _tree = _tree.concat(relation);
            }
          }
        };
      })(this));
      _tree.sort(this._sort);
      return _tree;
    };

    PeopleCollection.prototype._createFamily = function(members, model) {
      var family, mate;
      family = {};
      mate = members.findWhere({
        relation: model.get('id')
      });
      if (mate) {
        _.each([mate, model], (function(_this) {
          return function(model) {
            if (model.isMale()) {
              _.extend(family, {
                husband: model
              });
            }
            if (model.isFemale()) {
              return _.extend(family, {
                wife: model
              });
            }
          };
        })(this));
        if (_treeCache[(family.husband.get('id')) + "-" + (family.wife.get('id'))] == null) {
          _.extend(family, {
            children: this._findChildren(members, family.husband, family.wife)
          });
          return _treeCache[(family.husband.get('id')) + "-" + (family.wife.get('id'))] = family;
        } else {
          return _treeCache[(family.husband.get('id')) + "-" + (family.wife.get('id'))];
        }
      } else {
        return model;
      }
    };

    PeopleCollection.prototype._findChildren = function(collection, husband, wife) {
      var children, children_with_family, husband_id, wife_id;
      husband_id = husband.get('id');
      wife_id = wife.get('id');
      children_with_family = [];
      children = collection.filter((function(_this) {
        return function(model) {
          var parent;
          parent = model.get('parent');
          return _.isEmpty(_.difference(parent, [husband_id, wife_id])) && !_.isEmpty(parent);
        };
      })(this));
      _.each(children, (function(_this) {
        return function(model) {
          var family;
          family = _this._createFamily(_this, model);
          if (!_.contains(children_with_family, family)) {
            return children_with_family.push(family);
          }
        };
      })(this));
      _.each(children_with_family, (function(_this) {
        return function(model) {
          var relation;
          if (!(model instanceof PeopleModel)) {
            relation = _this._findRelationFamily(_this, model);
            if (relation != null) {
              return children_with_family = children_with_family.concat(relation);
            }
          }
        };
      })(this));
      children_with_family.sort(this._sort);
      return children_with_family;
    };

    PeopleCollection.prototype._findRelationFamily = function(collection, model) {
      var relation;
      if (model.children.length) {
        relation = [];
        _.each(model.children, (function(_this) {
          return function(children) {
            var not_in_family;
            not_in_family = null;
            if (!(children instanceof PeopleModel)) {
              _.each([children.husband, children.wife], function(child) {
                var parent;
                parent = child.get('parent');
                if (!_.isEmpty(_.difference([model.wife.get('id'), model.husband.get('id')], parent)) && !_.isEmpty(parent)) {
                  return not_in_family = child;
                }
              });
            }
            if (not_in_family != null) {
              return relation.push(_this._createFamily(_this, _this.findWhere({
                id: not_in_family.get('parent')[0]
              })));
            }
          };
        })(this));
        return relation;
      }
    };

    PeopleCollection.prototype._sort = function(a, b) {
      var hasChildren, isChildrenFamilies, isFamilies, isHusbandChild, isSameChild;
      isFamilies = !(a instanceof PeopleModel) && !(b instanceof PeopleModel);
      hasChildren = isFamilies && (a.children != null) && (b.children != null) && (a.children[0] != null) && (b.children[0] != null);
      isChildrenFamilies = hasChildren && !(a.children[0] instanceof PeopleModel) && !(b.children[0] instanceof PeopleModel);
      isSameChild = isChildrenFamilies && a.children[0] === b.children[0];
      isHusbandChild = isSameChild && a.children[0].husband.get('parent').indexOf(a.husband.get('id')) !== -1;
      if (!isHusbandChild) {
        return 1;
      } else if (!isChildrenFamilies) {
        return -1;
      } else {
        return 0;
      }
    };

    return PeopleCollection;

  })(Backbone.Collection);

  PeopleModel = (function(_super) {
    var _form;

    __extends(PeopleModel, _super);

    function PeopleModel() {
      this.validate = __bind(this.validate, this);
      this.getOneLetter = __bind(this.getOneLetter, this);
      this.isFemale = __bind(this.isFemale, this);
      this.isMale = __bind(this.isMale, this);
      this.initialize = __bind(this.initialize, this);
      return PeopleModel.__super__.constructor.apply(this, arguments);
    }

    _form = null;

    PeopleModel.prototype.defaults = {
      parent: [],
      relation: null,
      family: [],
      gender: null,
      name: "",
      id: 0
    };

    PeopleModel.prototype.view = null;

    PeopleModel.prototype.localStorage = new Backbone.LocalStorage("People");

    PeopleModel.prototype.initialize = function() {
      return _form = $('#add_human-form');
    };

    PeopleModel.prototype.isMale = function() {
      return this.get('gender') === 'male';
    };

    PeopleModel.prototype.isFemale = function() {
      return this.get('gender') === 'female';
    };

    PeopleModel.prototype.getOneLetter = function() {
      var gender;
      if (this.isMale()) {
        gender = "M";
      }
      if (this.isFemale()) {
        gender = "Ж";
      }
      return gender;
    };

    PeopleModel.prototype.validate = function(attrs, options) {
      this.set('family', this.get('family').map(function(val) {
        return parseInt(val);
      }));
      if (_.isEmpty(attrs.name)) {
        return [_form.find('input[name="name"]'), "Заполните поле имя"];
      }
      if (attrs.gender === 'none') {
        return [_form.find('select[name="gender"]'), "Выберите пол"];
      }
      if (attrs.family.length > 2) {
        return [_form.find('select[name="family"]'), "Не больше двух семей"];
      }
    };

    return PeopleModel;

  })(Backbone.Model);

  PeopleView = (function(_super) {
    var _template;

    __extends(PeopleView, _super);

    _template = null;

    PeopleView.prototype.searchAttr = [
      {
        name: 1
      }, {
        families: 'name',
        eq: 3,
        key: {
          family: 'id'
        }
      }
    ];

    function PeopleView() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      this._editRelation = __bind(this._editRelation, this);
      this._create = __bind(this._create, this);
      this.events = __bind(this.events, this);
      this.initialize = __bind(this.initialize, this);
      _template = _.template($('#people-templete').html());
      this.modal = $('#add_human-modal');
      _.extend(this, args[0]);
      this.collection = this.people;
      PeopleView.__super__.constructor.apply(this, args);
    }

    PeopleView.prototype.initialize = function() {
      return this.setElement(this._create());
    };

    PeopleView.prototype.events = function() {
      this.model.on('destroy', (function(_this) {
        return function() {
          return _this.$el.remove();
        };
      })(this));
      this.model.on('change', this._reload);
      return {
        'click .fa-remove': '_remove',
        'click .fa-pencil': '_update',
        'click .fa-group': '_editRelation',
        'setNumberOfRow': '_setNumberOfRow'
      };
    };

    PeopleView.prototype._create = function() {
      var $el, error, family;
      try {
        if (_.isArray(this.model.get('family'))) {
          family = ((function() {
            var _i, _len, _ref, _results;
            _ref = this.model.get('family');
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              family = _ref[_i];
              _results.push(this.families.findWhere({
                id: parseInt(family)
              }).get('name'));
            }
            return _results;
          }).call(this)).join(', ');
        }
      } catch (_error) {
        error = _error;
        family = null;
      }
      $el = $(_template({
        num: 0,
        name: this.model.get('name'),
        gender: this.model.getOneLetter(),
        family: family || "Нет семьи"
      }));
      if (this.model.isMale()) {
        $el.find('td').eq(2).html('<span class="fa fa-male"></span>');
      }
      if (this.model.isFemale()) {
        $el.find('td').eq(2).html('<span class="fa fa-female"></span>');
      }
      return $el;
    };

    PeopleView.prototype._editRelation = function() {
      return this.trigger('relation', this.model);
    };

    return PeopleView;

  })(AbstractView);

  SiteController = (function() {
    var _instance;

    _instance = null;

    SiteController.prototype.view = null;

    function SiteController() {
      this.initialize = __bind(this.initialize, this);
      this.initialize();
    }

    SiteController.prototype.initialize = function() {
      _.templateSettings = {
        evaluate: /\{\[([\s\S]+?)\]\}/g,
        interpolate: /\{\{(.+?)\}\}/g,
        escape: /\{\{\{([\s\S]+?)\}\}\}/g
      };
      bootbox.addLocale("ru", {
        "OK": "Применить",
        "CANCEL": "Отмена",
        "CONFIRM": "Подтвердить"
      });
      return bootbox.setDefaults("locale", "ru");
    };

    SiteController.getSiteController = function() {
      if (_instance === null) {
        return _instance = new SiteController;
      }
    };

    return SiteController;

  })();

  $(function() {
    return window.main = SiteController.getSiteController();
  });

  SiteView = (function(_super) {
    var _clearFlag, _instance, _model, _relationTemplate;

    __extends(SiteView, _super);

    _instance = null;

    _clearFlag = true;

    _model = null;

    _relationTemplate = null;

    SiteView.prototype.parent = null;

    SiteView.prototype.people = null;

    SiteView.prototype.families = null;

    SiteView.prototype.tree = null;

    function SiteView() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      this._validate = __bind(this._validate, this);
      this._clearForm = __bind(this._clearForm, this);
      this._relationFactory = __bind(this._relationFactory, this);
      this._editFamily = __bind(this._editFamily, this);
      this._edit = __bind(this._edit, this);
      this._familyModalOpen = __bind(this._familyModalOpen, this);
      this._humanModalOpen = __bind(this._humanModalOpen, this);
      this._loadFamilyInSelect = __bind(this._loadFamilyInSelect, this);
      this._search = __bind(this._search, this);
      this._saveFamily = __bind(this._saveFamily, this);
      this._saveHuman = __bind(this._saveHuman, this);
      this._clearStorage = __bind(this._clearStorage, this);
      this.renderTable = __bind(this.renderTable, this);
      this.render = __bind(this.render, this);
      this.createTestCollections = __bind(this.createTestCollections, this);
      this.events = __bind(this.events, this);
      this.initialize = __bind(this.initialize, this);
      _.extend(this, args[0]);
      this.people = new PeopleCollection;
      this.families = new FamilyCollection;
      this.people.fetch();
      this.families.fetch();
      _relationTemplate = _.template($('#relation-template').html());
      SiteView.__super__.constructor.apply(this, args);
    }

    SiteView.prototype.initialize = function() {
      if (this.people.isEmpty() && this.families.isEmpty()) {
        this.createTestCollections();
      }
      this.tree = new FamilyTreeView({
        parent: this,
        people: this.people,
        families: this.families
      });
      return this.render();
    };

    SiteView.prototype.events = function() {
      this.people.on('add', (function(_this) {
        return function(model) {
          return _this.renderTable($('#people'), _this.people, (function() {
            var args;
            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            return (function(func, args, ctor) {
              ctor.prototype = func.prototype;
              var child = new ctor, result = func.apply(child, args);
              return Object(result) === result ? result : child;
            })(PeopleView, args, function(){});
          }), model);
        };
      })(this));
      this.families.on('add', (function(_this) {
        return function(model) {
          return _this.renderTable($('#families'), _this.families, (function() {
            var args;
            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            return (function(func, args, ctor) {
              ctor.prototype = func.prototype;
              var child = new ctor, result = func.apply(child, args);
              return Object(result) === result ? result : child;
            })(FamilyView, args, function(){});
          }), model);
        };
      })(this));
      this.families.on('change', (function(_this) {
        return function(model) {
          _this._loadFamilyInSelect();
          return _this.people.each(function(human) {
            if (human.get('family').indexOf(model.get('id')) !== -1) {
              return human.trigger('change');
            }
          });
        };
      })(this));
      return {
        'keyup #search': '_search',
        'submit #add_human-form': '_saveHuman',
        'submit #add_family-form': '_saveFamily',
        'shown.bs.modal #add_human-modal': '_humanModalOpen',
        'shown.bs.modal #add_family-modal': '_familyModalOpen',
        'click #clear_storage': '_clearStorage'
      };
    };

    SiteView.prototype.createTestCollections = function() {
      this.families.create({
        name: 'Пупкины',
        id: 1
      });
      this.families.create({
        name: 'Ивановы',
        id: 2
      });
      this.families.create({
        name: 'Егоровы',
        id: 3
      });
      this.people.create({
        name: 'Александр Пупкин',
        gender: 'male',
        family: [1],
        relation: 2,
        id: 1
      });
      this.people.create({
        name: 'Татьяна Пупкина',
        gender: 'female',
        family: [1],
        relation: 1,
        id: 2
      });
      this.people.create({
        name: 'Сергей Иванов',
        gender: 'male',
        family: [2],
        relation: 4,
        id: 3
      });
      this.people.create({
        name: 'Валентина Иванова',
        gender: 'female',
        family: [2],
        relation: 3,
        id: 4
      });
      this.people.create({
        name: 'Василий Александрович Пупкин',
        gender: 'male',
        family: [1],
        relation: 6,
        parent: [1, 2],
        id: 5
      });
      this.people.create({
        name: 'Анастасия Сергеевна Иванова',
        gender: 'female',
        family: [1, 2],
        relation: 5,
        parent: [3, 4],
        id: 6
      });
      this.people.create({
        name: 'Ирина Васильевна Пупкина',
        gender: 'female',
        family: [1, 2],
        parent: [5, 6],
        id: 7
      });
      this.people.create({
        name: 'Антон Егоров',
        gender: 'male',
        family: [3],
        relation: 9,
        id: 8
      });
      return this.people.create({
        name: 'Марина Егорова',
        gender: 'female',
        family: [3],
        relation: 8,
        id: 9
      });
    };

    SiteView.prototype.render = function() {
      this.renderTable($('#people'), this.people, ((function(_this) {
        return function() {
          var args;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          return (function(func, args, ctor) {
            ctor.prototype = func.prototype;
            var child = new ctor, result = func.apply(child, args);
            return Object(result) === result ? result : child;
          })(PeopleView, args, function(){});
        };
      })(this)));
      this.renderTable($('#families'), this.families, ((function(_this) {
        return function() {
          var args;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          return (function(func, args, ctor) {
            ctor.prototype = func.prototype;
            var child = new ctor, result = func.apply(child, args);
            return Object(result) === result ? result : child;
          })(FamilyView, args, function(){});
        };
      })(this)));
      $('[data-toggle="tooltip"]').tooltip();
      $('[data-toggle="select2"]').select2();
      return this._loadFamilyInSelect();
    };

    SiteView.prototype.renderTable = function($table, collection, view_factory, model) {
      if (collection.length && (model == null)) {
        $table.removeClass('hide');
        return collection.each((function(_this) {
          return function(model) {
            return _this.renderTable($table, collection, view_factory, model);
          };
        })(this));
      } else if (model != null) {
        model.view = view_factory({
          model: model,
          people: this.people,
          families: this.families
        });
        return model.view.on('edit', this._edit).on('tree', this.tree.open).on('relation', this._editFamily).render().appendTo($table.find('tbody')).trigger('setNumberOfRow');
      }
    };

    SiteView.prototype._clearStorage = function() {
      localStorage.clear();
      this.createTestCollections();
      return location.href = location.href;
    };

    SiteView.prototype._saveHuman = function(e) {
      var $form, human;
      $form = $(e.currentTarget);
      human = _model || new PeopleModel(_.extend({
        id: this.people.max('id').get('id') + 1
      }, $form.serializeObject()));
      if (_model != null) {
        human.set($form.serializeObject());
      }
      human.on('invalid', this._validate);
      this._clearForm($form);
      if (human.isValid()) {
        if (_model == null) {
          this.people.create(human);
        } else {
          _model.save();
          _model = null;
        }
        return $('#add_human-modal').modal('hide');
      }
    };

    SiteView.prototype._saveFamily = function(e) {
      var $form, family;
      $form = $(e.currentTarget);
      family = _model || new FamilyModel(_.extend({
        id: this.families.max('id').get('id') + 1
      }, $form.serializeObject()));
      if (_model != null) {
        family.set($form.serializeObject());
      }
      family.on('invalid', this._validate);
      this._clearForm($form);
      if (family.isValid()) {
        if (_model == null) {
          this.families.create(family);
        } else {
          _model.save();
          _model = null;
        }
        return $('#add_family-modal').modal('hide');
      }
    };

    SiteView.prototype._search = function(e) {
      var $form;
      $form = $(e.currentTarget);
      this.people.each((function(_this) {
        return function(model) {
          return model.view.search($form.val());
        };
      })(this));
      return this.families.each((function(_this) {
        return function(model) {
          return model.view.search($form.val());
        };
      })(this));
    };

    SiteView.prototype._loadFamilyInSelect = function() {
      var $select;
      $select = $('#add_human_family-select');
      $select.find('option').remove();
      return $select.select2({
        data: this.families.map((function(_this) {
          return function(element) {
            return {
              id: element.get('id'),
              text: element.get('name')
            };
          };
        })(this)),
        placeholder: "Выбери семью",
        maximumSelectionLength: 2
      });
    };

    SiteView.prototype._humanModalOpen = function(e) {
      var $modal;
      if (_clearFlag) {
        $modal = $(e.currentTarget);
        $modal.find('input').val('');
        this._clearForm($('#add_human-form'));
        $('#add_human_gender-input').val('none').trigger('change');
        $('#add_human_family-select').val('').trigger('change');
        _model = null;
      }
      return _clearFlag = true;
    };

    SiteView.prototype._familyModalOpen = function(e) {
      var $modal;
      if (_clearFlag) {
        $modal = $(e.currentTarget);
        $modal.find('input').val('');
        _model = null;
      }
      return _clearFlag = true;
    };

    SiteView.prototype._edit = function(model) {
      var $form, $modal, key, val, _ref, _results;
      _clearFlag = false;
      _model = model;
      $modal = model.view.modal;
      $form = $modal.find('form');
      $modal.modal('show');
      _ref = model.toJSON();
      _results = [];
      for (key in _ref) {
        val = _ref[key];
        _results.push($form.find("[name='" + key + "'], [name='" + key + "[]']").val(val).trigger('change'));
      }
      return _results;
    };

    SiteView.prototype._editFamily = function(model) {
      var $tbody, children;
      children = this.people.filter(function(m) {
        return _.intersection([model.get('id')], m.get('parent')).length;
      });
      $tbody = $('#geneologic_editor-modal').find('table tbody');
      $('#geneologic_editor-man').html(model.get('name'));
      $('#geneologic_editor-modal').find('table tbody td').filter((function(_this) {
        return function(index) {
          return index > 0;
        };
      })(this)).remove();
      $('#geneologic_editor-modal').modal('show');
      $('#add_relation').off().click((function(_this) {
        return function() {
          return $tbody.append(_this._relationFactory({
            related: false,
            child_for: false,
            parent: false
          }, model));
        };
      })(this));
      if (model.get('relation') != null) {
        $tbody.append(this._relationFactory({
          related: true,
          child_for: false,
          parent: false
        }, model));
      }
      _.each(model.get('parent'), (function(_this) {
        return function(parent) {
          if (model.get('parent').length) {
            return $tbody.append(_this._relationFactory({
              related: false,
              child_for: true,
              parent: false
            }, model, parent));
          }
        };
      })(this));
      _.each(children, (function(_this) {
        return function(child) {
          if (children.length) {
            return $tbody.append(_this._relationFactory({
              related: false,
              child_for: false,
              parent: true
            }, model, child.get("id")));
          }
        };
      })(this));
      return $tbody.append(this._relationFactory({
        related: false,
        child_for: false,
        parent: false
      }, model));
    };

    SiteView.prototype._relationFactory = function(option, model, _id) {
      var $relation2, relation, relation_bind, save_bind;
      relation = $(_relationTemplate(_.extend(option, {
        man: model.get('name')
      })));
      relation_bind = (function(_this) {
        return function(e, addition) {
          var $relation2, $select, collection, id;
          id = model.get('id');
          collection = null;
          $select = relation.find('[data-toggle="select2"]').eq(0);
          $relation2 = relation.find('[data-toggle="select2"]').eq(1);
          $relation2.find('option').filter(function(index) {
            return index > 0;
          }).remove();
          switch ($select.val()) {
            case 'related':
              if (model.isFemale()) {
                collection = new PeopleCollection(_this.people.filter(function(model) {
                  return model.isMale();
                }));
              }
              if (model.isMale()) {
                collection = new PeopleCollection(_this.people.filter(function(model) {
                  return model.isFemale();
                }));
              }
              break;
            case 'child_for':
              collection = new PeopleCollection(_this.people.filter(function(m) {
                return !_.isEmpty(model.get('family')) && (m.get('relation') != null) && _.intersection(m.get('family'), model.get('family')).length && [id, parseInt(model.get('relation'))].indexOf(m.get('id')) === -1;
              }));
              break;
            case 'parent':
              collection = new PeopleCollection(_this.people.filter(function(m) {
                if ((_id != null) && m.get("id") === _id) {
                  return true;
                }
                return !_.isEmpty(model.get('family') && _.isEmpty(m.get('parent')) && _.intersection(m.get('family'), model.get('family')).length && (model.get('relation') != null) && [id, parseInt(model.get('relation'))].indexOf(m.get('id')) === -1);
              }));
          }
          if (collection != null) {
            return $relation2.select2({
              data: collection.map(function(model) {
                return {
                  id: model.get('id'),
                  text: model.get('name')
                };
              })
            });
          }
        };
      })(this);
      save_bind = (function(_this) {
        return function(e, _id) {
          var $relation2, $select, child, mate, parent;
          $select = relation.find('[data-toggle="select2"]').eq(0);
          $relation2 = relation.find('[data-toggle="select2"]').eq(1);
          if ($relation2.val() !== 'none') {
            switch ($select.val()) {
              case 'related':
                mate = parent = _this.people.findWhere({
                  id: parseInt($relation2.val())
                });
                model.set('relation', parseInt($relation2.val()));
                mate.set('relation', model.get('id'));
                return model.save();
              case 'child_for':
                parent = _this.people.findWhere({
                  id: parseInt($relation2.val())
                });
                if (parent.get("relation") != null) {
                  model.set('parent', [parent.get("id"), parent.get("relation")]);
                  return model.save();
                }
                break;
              case 'parent':
                child = _this.people.findWhere({
                  id: parseInt($relation2.val())
                });
                if (model.get("relation") != null) {
                  child.set('parent', [model.get("id"), model.get("relation")]);
                  return child.save();
                }
            }
          } else {
            switch ($select.val()) {
              case 'related':
                model.set('relation', null);
                model.save();
                break;
              case 'child_for':
                model.set('parent', []);
                model.save();
                break;
              case 'parent':
                child = _this.people.findWhere({
                  id: _id
                });
                child.set('parent', []);
                child.save();
            }
            return relation.remove();
          }
        };
      })(this);
      relation.find('[data-toggle="select2"]').select2().eq(0).on("select2:select", relation_bind).end().eq(1).on("select2:select", function(e) {
        return save_bind(e, _id);
      });
      if (option.related || option.child_for || option.parent) {
        relation_bind();
        $relation2 = relation.find('[data-toggle="select2"]').eq(1);
        if ((option.parent || option.child_for) && (_id != null)) {
          $relation2.val(_id).trigger('change');
        }
        if (option.related) {
          $relation2.val(this.people.findWhere({
            id: model.get('relation')
          }).get('id')).trigger('change');
        }
      }
      return relation;
    };

    SiteView.prototype._clearForm = function($form) {
      if (($form != null) && $form.length) {
        return $form.find('.has-error').removeClass('has-error').end().find('.text-danger, input[name="id"]').remove();
      }
    };

    SiteView.prototype._validate = function(model, _arg) {
      var error, input;
      input = _arg[0], error = _arg[1];
      return input.parents('.form-group').addClass('has-error').append("<div class='text-danger'>" + error + "</div>");
    };

    SiteView.getSiteView = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (_instance === null) {
        return _instance = (function(func, args, ctor) {
          ctor.prototype = func.prototype;
          var child = new ctor, result = func.apply(child, args);
          return Object(result) === result ? result : child;
        })(SiteView, args, function(){});
      } else {
        return _instance;
      }
    };

    return SiteView;

  })(Backbone.View);

  $(function() {
    return main.view = SiteView.getSiteView({
      parent: main,
      el: '.main'
    });
  });

}).call(this);
