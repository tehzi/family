// Generated by CoffeeScript 1.9.0
(function() {
  var PageView, PageViewNoTransitions, PageViewTransitions, SiteController,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __hasProp = {}.hasOwnProperty,
    __slice = [].slice;

  PageView = (function(_super) {
    __extends(PageView, _super);

    PageView.prototype._title_interval = 0;

    PageView.prototype._forse_stop = false;

    PageView.prototype._events = {
      'mouseenter [data-type="comics-title"]': '_comics_title',
      'mouseout [data-type="comics-title"]': '_comics_title'
    };

    PageView.prototype.el = 'body .main';

    PageView.prototype.parent = null;

    function PageView() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      this._comics_title = __bind(this._comics_title, this);
      this._slideShow = __bind(this._slideShow, this);
      this._slideHide = __bind(this._slideHide, this);
      this.events = __bind(this.events, this);
      this.initialize = __bind(this.initialize, this);
      _.extend(this, args[0]);
      PageView.__super__.constructor.apply(this, args);
    }

    PageView.prototype.initialize = function() {
      return $(window).load((function(_this) {
        return function() {
          return _this.parent.tooltip.show();
        };
      })(this));
    };

    PageView.prototype.events = function() {
      var events, key, val;
      events = {};
      for (key in this) {
        val = this[key];
        if (key.match(/^_.*events.*$/)) {
          events = _.extend(events, val);
        }
      }
      return events;
    };

    PageView.prototype._slideHide = function($slide) {
      var $title;
      $title = $('[data-type="comics-title"]');
      return $.when($title.parents('a').animate({
        'opacity': 0
      }, 50)).then(function() {
        $(this).attr('href', $slide.data('href'));
        return $title.html($slide.data('description'));
      });
    };

    PageView.prototype._slideShow = function($slide) {
      var $title;
      $title = $('[data-type="comics-title"]');
      $title.parent().css({
        'visibility': 'visible'
      });
      return $.when($title.parents('a').animate({
        'opacity': 1
      }, 50)).then(function() {
        return $title.html($slide.data('description'));
      });
    };

    PageView.prototype._comics_title = function(e) {
      var $carousel, $title, tick;
      $title = $(e.currentTarget);
      $carousel = $('#carousel-comics');
      tick = (function(_this) {
        return function() {
          return $.when($title.animate({
            'text-indent': -($title.textWidth() - 80)
          }, 2000)).then($title.animate({
            'text-indent': 0
          }, 2000));
        };
      })(this);
      (function(_this) {
        return (function() {
          if (e.type === 'mouseenter') {
            $carousel.find('.fa-pause').removeClass('fa-pause').addClass('fa-play');
            if ($title.textWidth() > 80) {
              tick();
              clearInterval(_this._title_interval);
              return _this._title_interval = setInterval(tick, 4200);
            }
          }
        });
      })(this)();
      (function(_this) {
        return (function() {
          if (e.type === 'mouseout') {
            clearInterval(_this._title_interval);
            if (!_this._forse_stop) {
              return $carousel.find('.fa-play').removeClass('fa-play').addClass('fa-pause');
            }
          }
        });
      })(this)();
      return [$title, $carousel];
    };

    return PageView;

  })(Backbone.View);

  PageViewNoTransitions = (function(_super) {
    var _force_stop, _interval, _timer;

    __extends(PageViewNoTransitions, _super);

    _interval = 0;

    _timer = 0;

    _force_stop = false;

    PageViewNoTransitions.prototype._events_ = {
      'click #carousel-comics .carousel-controls a.fa-backward': '_prev',
      'click #carousel-comics .carousel-controls a.fa-pause': '_stop',
      'click #carousel-comics .carousel-controls a.fa-play': '_start',
      'click #carousel-comics .carousel-controls a.fa-forward': '_next'
    };

    function PageViewNoTransitions() {
      this._comics_title = __bind(this._comics_title, this);
      this._slideShow = __bind(this._slideShow, this);
      this._slideHide = __bind(this._slideHide, this);
      this._prev = __bind(this._prev, this);
      this._next = __bind(this._next, this);
      this._stop = __bind(this._stop, this);
      this._start = __bind(this._start, this);
      PageViewNoTransitions.__super__.constructor.call(this);
      _interval = $('#carousel-comics').data('interval');
      $('#carousel-comics').carousel('pause').removeAttr('data-ride').find('a.fa-backward, a.fa-forward').removeAttr('data-slide').click(function(e) {
        return e.preventDefault();
      }).end().addClass('jcarousel').jcarousel({
        'wrap': 'circular'
      }).on('jcarousel:scroll', this._slideHide).on('jcarousel:animateend', this._slideShow);
      this._start();
    }

    PageViewNoTransitions.prototype._start = function(e) {
      this._timer = setInterval((function(_this) {
        return function() {
          return $('#carousel-comics').data('jcarousel').scroll('+=1');
        };
      })(this), _interval);
      return (function(_this) {
        return function() {
          var $play;
          if (e && e.type === 'click') {
            $play = $(e.currentTarget);
            $play.removeClass('fa-play').addClass('fa-pause');
            return _force_stop = false;
          }
        };
      })(this)();
    };

    PageViewNoTransitions.prototype._stop = function(e) {
      clearInterval(this._timer);
      return (function(_this) {
        return function() {
          var $pause;
          if (e && e.type === 'click') {
            $pause = $(e.currentTarget);
            $pause.removeClass('fa-pause').addClass('fa-play');
            return _force_stop = true;
          }
        };
      })(this)();
    };

    PageViewNoTransitions.prototype._next = function(e) {
      this._stop();
      $('#carousel-comics').data('jcarousel').scroll('+=1');
      if (!_force_stop) {
        return this._start();
      }
    };

    PageViewNoTransitions.prototype._prev = function(e) {
      this._stop();
      $('#carousel-comics').data('jcarousel').scroll('-=1');
      if (!_force_stop) {
        return this._start();
      }
    };

    PageViewNoTransitions.prototype._slideHide = function(e) {
      return PageViewNoTransitions.__super__._slideHide.call(this, $(e.currentTarget).jcarousel('target'));
    };

    PageViewNoTransitions.prototype._slideShow = function(e) {
      return PageViewNoTransitions.__super__._slideShow.call(this, $(e.currentTarget).jcarousel('target'));
    };

    PageViewNoTransitions.prototype._comics_title = function(e) {
      var $carousel, $title, _ref;
      _ref = PageViewNoTransitions.__super__._comics_title.call(this, e), $title = _ref[0], $carousel = _ref[1];
      (function(_this) {
        return (function() {
          if (e.type === 'mouseenter') {
            return _this._stop();
          }
        });
      })(this)();
      return (function(_this) {
        return function() {
          if (e.type === 'mouseout') {
            return _this._start();
          }
        };
      })(this)();
    };

    return PageViewNoTransitions;

  })(PageView);

  PageViewTransitions = (function(_super) {
    __extends(PageViewTransitions, _super);

    function PageViewTransitions() {
      this._comics_title = __bind(this._comics_title, this);
      this._slideShow = __bind(this._slideShow, this);
      this._slideHide = __bind(this._slideHide, this);
      return PageViewTransitions.__super__.constructor.apply(this, arguments);
    }

    PageViewTransitions.prototype._events_ = {
      'slide.bs.carousel #carousel-comics': '_slideHide',
      'slid.bs.carousel #carousel-comics': '_slideShow'
    };

    PageViewTransitions.prototype._slideHide = function(e) {
      return PageViewTransitions.__super__._slideHide.call(this, $(e.relatedTarget));
    };

    PageViewTransitions.prototype._slideShow = function(e) {
      return PageViewTransitions.__super__._slideShow.call(this, $(e.relatedTarget));
    };

    PageViewTransitions.prototype._comics_title = function(e) {
      var $carousel, $title, _ref;
      _ref = PageViewTransitions.__super__._comics_title.call(this, e), $title = _ref[0], $carousel = _ref[1];
      (function(_this) {
        return (function() {
          if (e.type === 'mouseenter') {
            return $carousel.carousel('pause');
          }
        });
      })(this)();
      return (function(_this) {
        return function() {
          if (e.type === 'mouseout') {
            return $carousel.carousel('cycle');
          }
        };
      })(this)();
    };

    return PageViewTransitions;

  })(PageView);

  SiteController = (function() {
    var _instance;

    _instance = null;

    SiteController.prototype.csstransitions = typeof Modernizr !== 'undefined' && Modernizr.csstransitions;

    SiteController.prototype.view = null;

    SiteController.prototype.tooltip = null;

    SiteController.prototype.bookmark = null;

    function SiteController() {
      this.initialize = __bind(this.initialize, this);
      _.templateSettings = {
        evaluate: /\{\[([\s\S]+?)\]\}/g,
        interpolate: /\{\{(.+?)\}\}/g,
        escape: /\{\{\{([\s\S]+?)\}\}\}/g
      };
      this.initialize();
    }

    SiteController.prototype.initialize = function() {
      if (!$('body').data('no_comic_view')) {
        return this.view = this.csstransitions ? new PageViewTransitions({
          parent: this
        }) : new PageViewNoTransitions({
          parent: this
        });
      }
    };

    SiteController.getSiteController = function() {
      if (_instance === null) {
        return _instance = new SiteController;
      }
    };

    return SiteController;

  })();

  $(function() {
    return window.main = SiteController.getSiteController();
  });

}).call(this);
