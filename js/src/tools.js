// Generated by CoffeeScript 1.9.0
(function() {
  var BookmarkCollection, BookmarkModel, BookmarkView, TooltipCollection, TooltipModel, TooltipView,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __hasProp = {}.hasOwnProperty,
    __slice = [].slice,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  BookmarkCollection = (function(_super) {
    __extends(BookmarkCollection, _super);

    BookmarkCollection.prototype.localStorage = new Backbone.LocalStorage("e39b168e");

    BookmarkCollection.prototype.model = null;

    function BookmarkCollection() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      this.model = BookmarkModel;
      BookmarkCollection.__super__.constructor.apply(this, args);
    }

    return BookmarkCollection;

  })(Backbone.Collection);

  BookmarkModel = (function(_super) {
    __extends(BookmarkModel, _super);

    BookmarkModel.prototype.defaults = {
      icon: null,
      name: null,
      bookmark: null,
      date: new Date().getTime()
    };

    BookmarkModel.prototype.idAttribute = 'bookmark';

    function BookmarkModel() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      BookmarkModel.__super__.constructor.apply(this, args);
    }

    return BookmarkModel;

  })(Backbone.Model);

  window.tools = _.extend(window.tools || {}, {
    BookmarksView: null
  });

  window.tools.BookmarksView = (function(_super) {
    var _beginTop, _instance, _template;

    __extends(BookmarksView, _super);

    _instance = null;

    _template = null;

    _beginTop = 0;

    BookmarksView.prototype.collection = null;

    BookmarksView.prototype.parent = null;

    BookmarksView.prototype.bookmarks = [];

    BookmarksView.prototype.animationTime = 300;

    BookmarksView.prototype.isOpen = false;

    BookmarksView.prototype.isShow = false;

    function BookmarksView() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      this._append = __bind(this._append, this);
      this._displayToggle = __bind(this._displayToggle, this);
      this.render = __bind(this.render, this);
      this.close = __bind(this.close, this);
      this.open = __bind(this.open, this);
      this.hide = __bind(this.hide, this);
      this.show = __bind(this.show, this);
      this.find = __bind(this.find, this);
      this.remove = __bind(this.remove, this);
      this.add = __bind(this.add, this);
      this.events = __bind(this.events, this);
      this.initialize = __bind(this.initialize, this);
      _template = _.template("<div class=\"bookmark-view\">\n    <div class=\"bookmark_view-widget\">\n        <div class=\"fa fa-star left\"></div>\n        <div class=\"bookmark_view-count left\">{{{count}}}</div>\n    </div>\n    <div class=\"bookmark_view-box\">\n        {[ _.each(bookmarks, function(bookmark){ ]}\n            {{bookmark}}\n        {[ }); ]}\n    </div>\n</div>");
      this.bookmarks = [];
      this.collection = new BookmarkCollection;
      _.extend(this, args[0]);
      BookmarksView.__super__.constructor.apply(this, args);
    }

    BookmarksView.prototype.initialize = function() {
      this.collection.fetch();
      this.render();
      if (this.collection.length) {
        this.show();
      }
      this.collection.on('add', this.render);
      this.collection.on('remove', this.render);
      return $(window).scroll((function(_this) {
        return function(e) {
          if (_this.$el != null) {
            return _this.$el.css('top', parseInt($(window).scrollTop()) + _beginTop);
          }
        };
      })(this));
    };

    BookmarksView.prototype.events = function() {
      return {
        'click .bookmark_view-count': '_displayToggle'
      };
    };

    BookmarksView.prototype.add = function(icon, name, url) {
      var model;
      model = new BookmarkModel({
        icon: icon,
        name: name,
        bookmark: url
      });
      this.collection.add(model);
      return model.save().done((function(_this) {
        return function() {
          return _this._append(model);
        };
      })(this));
    };

    BookmarksView.prototype.remove = function(url) {
      var model;
      model = this.find(url);
      if (model != null) {
        return model.destroy();
      }
    };

    BookmarksView.prototype.find = function(url) {
      if (this.collection != null) {
        return this.collection.findWhere({
          bookmark: url
        });
      }
    };

    BookmarksView.prototype.show = function() {
      if ((this.parent != null) && !this.isShow) {
        return $.when(this.$el.css({
          'opacity': 0
        }).appendTo(this.parent.$el)).then((function(_this) {
          return function() {
            if (!_beginTop) {
              return _beginTop = parseInt(_this.$el.css('top'));
            }
          };
        })(this)).done((function(_this) {
          return function() {
            _this.$el.animate({
              'opacity': 1
            }, _this.animationTime);
            return _this.isShow = true;
          };
        })(this));
      }
    };

    BookmarksView.prototype.hide = function() {
      if (this.parent != null) {
        return this.$el.animate({
          'opacity': 0
        }, this.animationTime, (function(_this) {
          return function() {
            _this.close();
            _this.$el.detach();
            return _this.isShow = false;
          };
        })(this));
      }
    };

    BookmarksView.prototype.open = function() {
      if (this.$el != null) {
        this.$el.find('.bookmark_view-box').show();
        return this.isOpen = true;
      }
    };

    BookmarksView.prototype.close = function() {
      if (this.$el != null) {
        this.$el.find('.bookmark_view-box').hide();
        return this.isOpen = false;
      }
    };

    BookmarksView.prototype.render = function() {
      if (!this.$el.hasClass('bookmark-view')) {
        this.$el = $(_template({
          count: this.collection.length,
          bookmarks: []
        }));
        this.el = this.$el.get(0);
        this.collection.each(this._append);
      }
      this.$el.find('.bookmark_view-count').html(this.collection.length);
      if (this.collection.length === 1) {
        this.show();
      }
      if (this.collection.length === 0) {
        return this.hide();
      }
    };

    BookmarksView.prototype._displayToggle = function() {
      if (this.isOpen) {
        return this.close();
      } else {
        return this.open();
      }
    };

    BookmarksView.prototype._append = function(model) {
      this.bookmarks.push(new BookmarkView({
        model: model
      }));
      return this.$el.find('.bookmark_view-box').append(_.last(this.bookmarks).render());
    };

    BookmarksView.getBookmarks = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (_instance == null) {
        return _instance = (function(func, args, ctor) {
          ctor.prototype = func.prototype;
          var child = new ctor, result = func.apply(child, args);
          return Object(result) === result ? result : child;
        })(this, args, function(){});
      } else {
        return _instance;
      }
    };

    return BookmarksView;

  })(Backbone.View);

  $(function() {
    if (main.bookmark === null) {
      return main.bookmark = tools.BookmarksView.getBookmarks({
        parent: main.view
      });
    }
  });

  BookmarkView = (function(_super) {
    var _template;

    __extends(BookmarkView, _super);

    _template = null;

    function BookmarkView() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      this.render = __bind(this.render, this);
      this.remove = __bind(this.remove, this);
      this.events = __bind(this.events, this);
      this.initialize = __bind(this.initialize, this);
      _template = _.template("<div class=\"bookmark_view-item\">\n    <div class=\"left bookmark_view_image-wrapper\">\n        <a href=\"{{{href}}}\"><img src=\"{{src}}\" alt=\"{{alt}}\"></a>\n    </div>\n    <div class=\"bookmark_view-wrapper\">\n        <div class=\"bookmark_view-name\"><a href=\"{{{href}}}\">{{{name}}}</a></div>\n        <div class=\"bookmark_view-date\">{{{date}}}</div>\n    </div>\n    <a href=\"javascript:void(0)\" class=\"bookmark_view-remove fa fa-times\"></a>\n</div>");
      BookmarkView.__super__.constructor.apply(this, args);
    }

    BookmarkView.prototype.initialize = function() {
      this.model.on('remove', this.remove);
      return this.render();
    };

    BookmarkView.prototype.events = function() {
      return {
        'click .bookmark_view-remove': 'remove'
      };
    };

    BookmarkView.prototype.remove = function() {
      if (this.model != null) {
        this.model.destroy();
      }
      return this.$el.remove();
    };

    BookmarkView.prototype.render = function() {
      var date;
      if (!this.$el.hasClass('bookmark_view-item')) {
        date = new Date(this.model.get('date'));
        date = ("0" + (date.getDate())).slice(-2) + "." + ("0" + (date.getMonth() + 1)).slice(-2) + ("." + (date.getFullYear()));
        this.$el = $(_template({
          src: this.model.get('icon'),
          alt: this.model.get('name'),
          name: this.model.get('name'),
          href: this.model.get('bookmark'),
          date: date
        }));
        this.el = this.$el.get(0);
      }
      return this.$el;
    };

    return BookmarkView;

  })(Backbone.View);

  window.tools = _.extend(window.tools || {}, {
    LoadingBox: null
  });

  window.tools.LoadingBox = (function() {
    var _alt, _image, _loadingBox, _temp;

    LoadingBox.prototype.selector = '';

    LoadingBox.prototype._template = null;

    _image = null;

    _alt = "";

    _loadingBox = null;

    _temp = "<img src='{{src}}' alt=''>";

    function LoadingBox(_at_selector) {
      this.selector = _at_selector;
      this.setAlt = __bind(this.setAlt, this);
      this.setImage = __bind(this.setImage, this);
      _loadingBox = $(this.selector);
      this._template = _.template(_temp);
    }

    LoadingBox.prototype.setImage = function(src) {
      if ((_loadingBox != null) && _loadingBox.length) {
        _image = $(this._template({
          src: src
        }));
        _image.on('load', (function(_this) {
          return function() {
            $(_this).trigger('end');
            if (_alt) {
              return _this.setAlt(_alt);
            }
          };
        })(this));
        _loadingBox.append(_image);
        return $(this).trigger('start');
      }
    };

    LoadingBox.prototype.getImage = function() {
      return _image;
    };

    LoadingBox.prototype.setAlt = function(alt) {
      if (_image === null) {
        return _alt = alt;
      } else {
        return _image.attr('alt', alt);
      }
    };

    LoadingBox.prototype.reset = function() {
      _image = null;
      _alt = "";
      return this._template = _.template(_temp);
    };

    return LoadingBox;

  })();

  TooltipCollection = (function(_super) {
    __extends(TooltipCollection, _super);

    TooltipCollection.prototype.localStorage = new Backbone.LocalStorage("bda2a6d8");

    function TooltipCollection(collection, options) {
      if (collection == null) {
        collection = [];
      }
      if (options == null) {
        options = {};
      }
      this.model = TooltipModel;
      TooltipCollection.__super__.constructor.call(this, collection, options);
    }

    TooltipCollection.prototype.findByMark = function(mark) {
      return this.indexBy(mark, 'mark');
    };

    return TooltipCollection;

  })(Backbone.Collection);

  TooltipModel = (function(_super) {
    __extends(TooltipModel, _super);

    TooltipModel.prototype.idAttribute = 'mark';

    TooltipModel.prototype.defaults = {
      mark: false,
      title: "",
      tip: "",
      autoshow: true
    };

    function TooltipModel() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      TooltipModel.__super__.constructor.apply(this, args);
    }

    return TooltipModel;

  })(Backbone.Model);

  window.tools = _.extend(window.tools || {}, {
    TooltipsView: null
  });

  window.tools.TooltipsView = (function(_super) {
    var _error, _tooltip;

    __extends(TooltipsView, _super);

    _tooltip = null;

    _error = null;

    TooltipsView.collection = null;

    TooltipsView.prototype.tooltips = [];

    function TooltipsView(options) {
      this.show = __bind(this.show, this);
      this.initialize = __bind(this.initialize, this);
      this.collection = new TooltipCollection;
      this.tooltips = [];
      TooltipsView.__super__.constructor.call(this, options);
    }

    TooltipsView.prototype.initialize = function() {
      this.collection.fetch();
      return $('[data-toggle="tooltip-view"]').each((function(_this) {
        return function(index, element) {
          var $element, mark, model, modelParams;
          $element = $(element);
          mark = $element.data('mark');
          model = _this.collection.findWhere({
            mark: mark
          });
          if (model == null) {
            modelParams = {
              mark: mark,
              title: $element.data('title'),
              tip: $element.attr('title'),
              autoshow: $element.data('autoshow')
            };
            model = new TooltipModel(_.extend({}, TooltipModel.prototype.defaults, modelParams));
            _this.collection.add(model);
            model.save();
          }
          return _this.tooltips.push(new TooltipView({
            model: model,
            parent: element
          }));
        };
      })(this));
    };

    TooltipsView.prototype.show = function() {
      return _.each(this.tooltips, (function(_this) {
        return function(element) {
          return element.show();
        };
      })(this));
    };

    TooltipsView.getTooltip = function() {
      if (_tooltip === null) {
        return _tooltip = new TooltipsView;
      } else {
        return _tooltip;
      }
    };

    TooltipsView.error = function(title, error) {
      var _error_template;
      if (_error != null) {
        _error.remove();
      }
      _error_template = _.template("<div class=\"tooltip_view-error\">\n    <div class=\"tooltip_view_error-title\">{{{title}}}</div>\n    <div class=\"tooltip_view_error-content\">{{{error}}}</div>\n    <a href=\"javascript:void(0)\" class=\"tooltip_view-remove fa fa-times\"></a>\n</div>");
      _error = $(_error_template({
        title: title,
        error: error
      }));
      return _error.css({
        opacity: 0
      }).appendTo('body').animate({
        opacity: 1
      }).find('.tooltip_view-remove').on('click', this.errorClose);
    };

    TooltipsView.errorClose = function() {
      if (_error != null) {
        return _error.remove();
      }
    };

    return TooltipsView;

  })(Backbone.View);

  $(function() {
    return main.tooltip = tools.TooltipsView.getTooltip();
  });

  TooltipView = (function(_super) {
    var _template;

    __extends(TooltipView, _super);

    _template = null;

    TooltipView.prototype.parent = null;

    TooltipView.prototype.$parent = null;

    TooltipView.prototype.timeToClose = 10000;

    function TooltipView() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      this._ieOldAdditionalRender = __bind(this._ieOldAdditionalRender, this);
      this._close = __bind(this._close, this);
      this.close = __bind(this.close, this);
      this.render = __bind(this.render, this);
      this.show = __bind(this.show, this);
      this.autoshow = __bind(this.autoshow, this);
      this.events = __bind(this.events, this);
      this.initialize = __bind(this.initialize, this);
      _template = _.template("<div class=\"tooltip-view\">\n    <div class=\"tooltip_view-close fa fa-times\"></div>\n    <div class=\"tooltip_view-title\">{{{title}}}</div>\n    <div class=\"tooltip_view-content\">{{{content}}}</div>\n</div>");
      TooltipView.__super__.constructor.apply(this, args);
      _.extend(this, args[0]);
      if (this.parent != null) {
        this.$parent = $(this.parent);
      }
    }

    TooltipView.prototype.initialize = function() {
      this.el = _template({
        title: this.model.get('title'),
        content: this.model.get('tip')
      });
      return this.$el = $(this.el);
    };

    TooltipView.prototype.events = function() {
      return {
        'click .tooltip_view-close': 'close'
      };
    };

    TooltipView.prototype.autoshow = function() {
      return this.model.get('autoshow');
    };

    TooltipView.prototype.show = function() {
      if (this.autoshow()) {
        return this.render();
      }
    };

    TooltipView.prototype.render = function() {
      var left, offset, top, _ref;
      _ref = [], offset = _ref[0], top = _ref[1], left = _ref[2];
      return $.when(this.$el.css({
        opacity: 0
      }).appendTo('body')).then((function(_this) {
        return function() {
          if ($('html').hasClass('lte8')) {
            _this._ieOldAdditionalRender();
          }
          offset = _this.$parent.offset();
          top = offset.top + _this.$parent.height() + parseInt(_this.$el.css('margin-top'));
          return left = offset.left + parseInt(_this.$el.css('margin-left'));
        };
      })(this)).done((function(_this) {
        return function() {
          return _this.$el.css({
            top: top,
            left: left
          }).animate({
            opacity: 1
          }, 1300, function() {
            return setTimeout(_this._close, _this.timeToClose);
          });
        };
      })(this));
    };

    TooltipView.prototype.close = function() {
      this.model.set('autoshow', false);
      this.model.save();
      return this._close();
    };

    TooltipView.prototype._close = function() {
      return this.$el.animate({
        opacity: 0
      }, 300);
    };

    TooltipView.prototype._ieOldAdditionalRender = function() {
      return this.$el.prepend('<div class="triangle-up"></div>');
    };

    return TooltipView;

  })(Backbone.View);

}).call(this);
