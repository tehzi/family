// Generated by CoffeeScript 1.9.0
(function() {
  var ComicsMock, log,
    __slice = [].slice;

  window.mock = _.extend(window.mock || {}, {
    ComicsMock: null
  });

  log = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    if (window.console && window.console.log) {
      return console.log.apply(console, args);
    }
  };

  ComicsMock = (function() {
    function ComicsMock() {
      var deferred;
      deferred = $.Deferred();
      $.ajax = (function(_this) {
        return function(options) {
          var next, page, prev, what;
          deferred = $.Deferred();
          log("ajax ", options);
          switch (options.type) {
            case "GET":
              what = options.url.match(/([a-z]+)\/([0-9]+)\/?$/)[1];
              switch (what) {
                case 'next':
                  page = parseInt(options.url.match(/next\/([0-9]+)\/?$/)[1]);
                  next = page + 1;
                  if ((0 < next && next < 9)) {
                    log('resolve ', {
                      next: next,
                      url: "/furries/other/comic/" + next + ".jpeg"
                    });
                    deferred.resolve({
                      next: next,
                      url: "/furries/other/comic/" + next + ".jpeg"
                    });
                  } else {
                    log('error', 'not found');
                    deferred.reject({
                      error: 'not found'
                    });
                  }
                  break;
                case 'prev':
                  page = parseInt(options.url.match(/prev\/([0-9]+)\/?$/)[1]);
                  prev = page - 1;
                  if ((0 < prev && prev < 9)) {
                    log('resolve ', {
                      prev: prev,
                      url: "/furries/other/comic/" + prev + ".jpeg"
                    });
                    deferred.resolve({
                      prev: prev,
                      url: "/furries/other/comic/" + prev + ".jpeg"
                    });
                  } else {
                    log('error', 'not found');
                    deferred.reject({
                      error: 'not found'
                    });
                  }
              }
              if (options.url.match(/^\/rest/)) {
                page = parseInt(options.url.match(/strip\/([0-9]+)$/)[1]);
                if ((0 < page && page < 9)) {
                  log('resolve ', {
                    page: page,
                    url: "/furries/other/comic/" + page + ".jpeg"
                  });
                  deferred.resolve({
                    page: page,
                    url: "/furries/other/comic/" + page + ".jpeg"
                  });
                } else {
                  log('error', 'not found');
                  deferred.reject({
                    error: 'not found'
                  });
                }
              }
          }
          return deferred;
        };
      })(this);
    }

    return ComicsMock;

  })();

  window.mock.ComicsMock = ComicsMock;

}).call(this);
